// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  DOCTOR
  NURSE
}

enum QueueStatus {
  IN_PROGRESS
  COMPLETED
}

enum VisitStatus {
  PENDING
  PRESCRIBED
  COMPLETED
}

// If change this remember to update the prescription type in IssueFromInventory
enum DrugType {
  Tablet
  Syrup
}

enum BatchStatus {
  AVAILABLE
  EXPIRED
  COMPLETED
  TRASHED
}

enum IssuingStrategy {
  TDS // Ter die sumendum - Three times a day
  BD // Bis die - Twice a day
  OD // Omne die - Once a day
  QDS // Quater die sumendum - Four times a day
  SOS // Si opus sit - If needed
  NOCTE // At night
  MANE // In the morning
  VESPE // In the evening
  NOON // At noon
  WEEKLY // Once a week
  OTHER //
}

enum MEAL {
  BEFORE
  AFTER
  WITH
}

enum PrescriptionStatus {
  PENDING
  COMPLETED
}

enum MedicalCertificateStatus {
  FIT
  UNFIT
}

model Patient {
  id           Int                  @id @default(autoincrement())
  telephone    String
  name         String
  birthDate    DateTime?
  address      String?
  height       Float?
  weight       Float?
  gender       Gender
  NIC          String?
  queueEntry   QueueEntry[]
  prescription Prescription[]
  reports      PatientReport[]
  medicalCert  MedicalCertificate[]
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String
  gender   Gender
  image    String?
  mobile   String
  password String
  role     Role
}

model Queue {
  id      Int          @id @default(autoincrement())
  start   DateTime     @default(now())
  end     DateTime?
  status  QueueStatus  @default(IN_PROGRESS)
  entries QueueEntry[]
}

model QueueEntry {
  id        Int         @id @default(autoincrement())
  token     Int // Token number within the queue
  status    VisitStatus @default(PENDING)
  queue     Queue       @relation(fields: [queueId], references: [id])
  queueId   Int
  patient   Patient     @relation(fields: [patientId], references: [id])
  patientId Int
  time      DateTime    @default(now())

  @@unique([queueId, token]) // Ensure token uniqueness within a queue
}

model DrugBrand {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  Batch        Batch[]
  Issue        Issue[]
  BatchHistory BatchHistory[]
}

model Drug {
  id               Int                @id @default(autoincrement())
  name             String
  batch            Batch[]
  stratergyHistory StratergyHistory[]
  Issue            Issue[]
  BatchHistory     BatchHistory[]
}

model Batch {
  id                  Int               @id @default(autoincrement())
  number              String
  drugId              Int
  drug                Drug              @relation(fields: [drugId], references: [id])
  drugBrandId         Int
  drugBrand           DrugBrand         @relation(fields: [drugBrandId], references: [id])
  type                DrugType
  fullAmount          Float
  expiry              DateTime
  stockDate           DateTime          @default(now())
  remainingQuantity   Float
  wholesalePrice      Float
  retailPrice         Float
  status              BatchStatus
  Issue               Issue[]
  BatchHistory        BatchHistory[]
  unitConcentration   UnitConcentration @relation(fields: [unitConcentrationId], references: [id])
  unitConcentrationId Int
}

model UnitConcentration {
  id            Int            @id @default(autoincrement())
  concentration Float          @unique
  Batch         Batch[]
  Issue         Issue[]
  BatchHistory  BatchHistory[]
}

model Prescription {
  id                 Int                  @id @default(autoincrement())
  time               DateTime             @default(now())
  presentingSymptoms String
  status             PrescriptionStatus   @default(PENDING)
  extraDoctorCharge  Float?
  details            String?
  patient            Patient              @relation(fields: [patientId], references: [id])
  patientId          Int
  issues             Issue[]
  OffRecordMeds      OffRecordMeds[]
  Bill               Bill?
  PrescriptionVitals PrescriptionVitals[]
}

enum VitalType {
  NUMBER
  TEXT
  DATE
}

model Vitals {
  id                 Int                  @id @default(autoincrement())
  name               String
  placeholder        String
  forGender          Gender?
  type               VitalType
  PrescriptionVitals PrescriptionVitals[]
}

model PrescriptionVitals {
  id             Int          @id @default(autoincrement())
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId Int
  vital          Vitals       @relation(fields: [vitalId], references: [id])
  vitalId        Int
  value          String
}

model MedicalCertificate {
  id                   Int                      @id @default(autoincrement())
  patient              Patient                  @relation(fields: [patientId], references: [id])
  patientId            Int
  nameOfThePatient     String
  addressOfThePatient  String
  fitForDuty           MedicalCertificateStatus
  dateOfSickness       DateTime
  recommendedLeaveDays Int
  natureOfTheDisease   String
  ageOfThePatient      Int
  reccomendations      String
  time                 DateTime
}

model Bill {
  id               Int          @id @default(autoincrement())
  doctorCharge     Float
  dispensaryCharge Float
  medicinesCharge  Float
  Prescription     Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId   Int          @unique // Ensures one-to-one relationship
}

model OffRecordMeds {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId Int
}

model Issue {
  id                  Int                @id @default(autoincrement())
  prescription        Prescription       @relation(fields: [prescriptionId], references: [id])
  prescriptionId      Int
  batch               Batch?             @relation(fields: [batchId], references: [id])
  batchId             Int?
  drug                Drug               @relation(fields: [drugId], references: [id])
  drugId              Int
  brand               DrugBrand          @relation(fields: [brandId], references: [id])
  brandId             Int
  strategy            IssuingStrategy
  quantity            Float
  dose                Float
  details             String?
  meal                MEAL?
  type                DrugType
  unitConcentration   UnitConcentration  @relation(fields: [unitConcentrationId], references: [id])
  unitConcentrationId Int
  stratergyHistory    StratergyHistory[]
}

model ReportParameter {
  id           Int           @id @default(autoincrement())
  name         String
  units        String?
  ReportType   ReportType?   @relation(fields: [reportTypeId], references: [id], onDelete: Cascade)
  reportTypeId Int?
  ReportValue  ReportValue[]
}

model ReportType {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  description   String?
  parameters    ReportParameter[]
  PatientReport PatientReport[]
}

model PatientReport {
  id           Int           @id @default(autoincrement())
  patient      Patient       @relation(fields: [patientId], references: [id])
  patientId    Int
  reportType   ReportType    @relation(fields: [reportTypeId], references: [id], onDelete: Cascade)
  reportTypeId Int
  time         DateTime      @default(now())
  parameters   ReportValue[]
}

model ReportValue {
  id                Int             @id @default(autoincrement())
  reportParameter   ReportParameter @relation(fields: [reportParameterId], references: [id], onDelete: Cascade)
  reportParameterId Int
  attention         Boolean         @default(false)
  value             String
  PatientReport     PatientReport?  @relation(fields: [patientReportId], references: [id], onDelete: Cascade)
  patientReportId   Int?
}

model StratergyHistory {
  id      Int   @id @default(autoincrement())
  drug    Drug  @relation(fields: [drugId], references: [id])
  drugId  Int   @unique
  issue   Issue @relation(fields: [issueId], references: [id])
  issueId Int
}

model BatchHistory {
  id                  Int               @id @default(autoincrement())
  drug                Drug              @relation(fields: [drugId], references: [id])
  drugId              Int
  type                DrugType
  unitConcentration   UnitConcentration @relation(fields: [unitConcentrationId], references: [id])
  unitConcentrationId Int
  brand               DrugBrand         @relation(fields: [drugBrandId], references: [id])
  drugBrandId         Int
  batchId             Int
  batch               Batch             @relation(fields: [batchId], references: [id])

  @@unique([drugId, drugBrandId, type, unitConcentrationId])
}

enum ChargeType {
  DOCTOR
  DISPENSARY
}

model Charge {
  name      ChargeType @id
  value     Float
  updatedAt DateTime   @updatedAt // Tracks last modification
}
