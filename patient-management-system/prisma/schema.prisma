generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Models

model Patient {
  id             Int                  @id @default(autoincrement())
  telephone      String
  name           String
  birthDate      DateTime?
  address        String?
  height         Float?
  weight         Float?
  gender         Gender
  NIC            String?
  medicalCert    MedicalCertificate[]
  PatientHistory PatientHistory[]
  reports        PatientReport[]
  prescription   Prescription[]
  queueEntry     QueueEntry[]
}

model PatientHistory {
  id          Int                @id @default(autoincrement())
  patientId   Int
  description String?
  type        PatientHistoryType
  time        DateTime           @default(now())
  name        String
  patient     Patient            @relation(fields: [patientId], references: [id])
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String
  gender   Gender
  image    String?
  mobile   String
  password String
  role     Role
}

model Queue {
  id      Int          @id @default(autoincrement())
  start   DateTime     @default(now())
  end     DateTime?
  status  QueueStatus  @default(IN_PROGRESS)
  entries QueueEntry[]
}

model QueueEntry {
  id        Int         @id @default(autoincrement())
  token     Int
  status    VisitStatus @default(PENDING)
  queueId   Int
  patientId Int
  time      DateTime    @default(now())
  patient   Patient     @relation(fields: [patientId], references: [id])
  queue     Queue       @relation(fields: [queueId], references: [id])

  @@unique([queueId, token])
}

model DrugBrand {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  Batch        Batch[]
  BatchHistory BatchHistory[]
  Issue        Issue[]
}

model Drug {
  id               Int               @id @default(autoincrement())
  name             String
  batch            Batch[]
  BatchHistory     BatchHistory[]
  Issue            Issue[]
  stratergyHistory StratergyHistory?
  bufferLevels     BufferLevel[]
}

model BufferLevel {
  id                  Int               @id @default(autoincrement())
  drugId              Int
  type                DrugType
  unitConcentrationId Int
  bufferAmount        Int
  drug                Drug              @relation(fields: [drugId], references: [id])
  unitConcentration   UnitConcentration @relation(fields: [unitConcentrationId], references: [id])

  @@unique([drugId, type, unitConcentrationId])
}

model Supplier {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  contact String?
  batches Batch[]
}

model Batch {
  id                  Int               @id @default(autoincrement())
  number              String
  drugId              Int
  drugBrandId         Int
  type                DrugType
  fullAmount          Float
  expiry              DateTime
  stockDate           DateTime          @default(now())
  remainingQuantity   Float
  wholesalePrice      Float
  retailPrice         Float
  status              BatchStatus
  unitConcentrationId Int
  supplierId          Int
  drugBrand           DrugBrand         @relation(fields: [drugBrandId], references: [id])
  drug                Drug              @relation(fields: [drugId], references: [id])
  Supplier            Supplier          @relation(fields: [supplierId], references: [id])
  unitConcentration   UnitConcentration @relation(fields: [unitConcentrationId], references: [id])
  BatchHistory        BatchHistory[]
  Issue               Issue[]
}

model UnitConcentration {
  id            Int            @id @default(autoincrement())
  concentration Float          @unique
  Batch         Batch[]
  BatchHistory  BatchHistory[]
  Issue         Issue[]
  BufferLevel   BufferLevel[]
}

model Prescription {
  id                 Int                   @id @default(autoincrement())
  time               DateTime              @default(now())
  presentingSymptoms String
  status             PrescriptionStatus    @default(PENDING)
  details            String?
  patientId          Int
  issues             Issue[]
  OffRecordMeds      OffRecordMeds[]
  patient            Patient               @relation(fields: [patientId], references: [id])
  PrescriptionVitals PrescriptionVitals[]
  Charges            PrescriptionCharges[]
  finalPrice         Float?
}

model PrescriptionCharges {
  id             Int          @id @default(autoincrement())
  Prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId Int
  name           String
  type           ChargeType
  value          Float
  description    String?
}

model Vitals {
  id                 Int                  @id @default(autoincrement())
  name               String
  icon               String
  color              String
  placeholder        String
  forGender          Gender?
  type               VitalType
  PrescriptionVitals PrescriptionVitals[]
}

model PrescriptionVitals {
  id             Int          @id @default(autoincrement())
  prescriptionId Int
  vitalId        Int
  value          String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  vital          Vitals       @relation(fields: [vitalId], references: [id], onDelete: Cascade)
}

model MedicalCertificate {
  id                   Int                      @id @default(autoincrement())
  patientId            Int
  nameOfThePatient     String
  addressOfThePatient  String
  fitForDuty           MedicalCertificateStatus
  dateOfSickness       DateTime
  recommendedLeaveDays Int
  natureOfTheDisease   String
  ageOfThePatient      Int
  reccomendations      String
  time                 DateTime
  patient              Patient                  @relation(fields: [patientId], references: [id])
}

model OffRecordMeds {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  prescriptionId Int
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
}

model Issue {
  id                  Int                @id @default(autoincrement())
  prescriptionId      Int
  batchId             Int?
  drugId              Int
  brandId             Int
  strategy            IssuingStrategy
  quantity            Float
  dose                Float
  details             String?
  meal                MEAL?
  type                DrugType
  unitConcentrationId Int
  batch               Batch?             @relation(fields: [batchId], references: [id])
  brand               DrugBrand          @relation(fields: [brandId], references: [id])
  drug                Drug               @relation(fields: [drugId], references: [id])
  prescription        Prescription       @relation(fields: [prescriptionId], references: [id])
  unitConcentration   UnitConcentration  @relation(fields: [unitConcentrationId], references: [id])
  stratergyHistory    StratergyHistory[]
}

model ReportParameter {
  id           Int           @id @default(autoincrement())
  name         String
  units        String?
  reportTypeId Int?
  ReportType   ReportType?   @relation(fields: [reportTypeId], references: [id], onDelete: Cascade)
  ReportValue  ReportValue[]
}

model ReportType {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  description   String?
  PatientReport PatientReport[]
  parameters    ReportParameter[]
}

model PatientReport {
  id           Int           @id @default(autoincrement())
  patientId    Int
  reportTypeId Int
  time         DateTime      @default(now())
  patient      Patient       @relation(fields: [patientId], references: [id])
  reportType   ReportType    @relation(fields: [reportTypeId], references: [id], onDelete: Cascade)
  parameters   ReportValue[]
}

model ReportValue {
  id                Int             @id @default(autoincrement())
  reportParameterId Int
  attention         Boolean         @default(false)
  value             String
  patientReportId   Int?
  PatientReport     PatientReport?  @relation(fields: [patientReportId], references: [id], onDelete: Cascade)
  reportParameter   ReportParameter @relation(fields: [reportParameterId], references: [id], onDelete: Cascade)
}

model StratergyHistory {
  id      Int   @id @default(autoincrement())
  drugId  Int   @unique
  issueId Int
  drug    Drug  @relation(fields: [drugId], references: [id])
  issue   Issue @relation(fields: [issueId], references: [id])
}

model BatchHistory {
  id                  Int               @id @default(autoincrement())
  drugId              Int
  type                DrugType
  unitConcentrationId Int
  drugBrandId         Int
  batchId             Int
  batch               Batch             @relation(fields: [batchId], references: [id])
  brand               DrugBrand         @relation(fields: [drugBrandId], references: [id])
  drug                Drug              @relation(fields: [drugId], references: [id])
  unitConcentration   UnitConcentration @relation(fields: [unitConcentrationId], references: [id])

  @@unique([drugId, drugBrandId, type, unitConcentrationId])
}

model Charge {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  type      ChargeType
  value     Float
  updatedAt DateTime   @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  DOCTOR
  NURSE
}

enum QueueStatus {
  IN_PROGRESS
  COMPLETED
}

enum VisitStatus {
  PENDING
  PRESCRIBED
  COMPLETED
}

enum DrugType {
  TABLET
  CAPSULE
  SYRUP
  EYE_DROP
  EAR_DROP
  NASAL_DROP
  CREAM
  OINTMENT
  GEL
  LOTION
  INJECTION
  INHALER
  SPRAY
  LOZENGE
  SUPPOSITORY
  PATCH
  POWDER
  SOLUTION
  SUSPENSION
  GARGLE
  MOUTHWASH
}

enum BatchStatus {
  AVAILABLE
  EXPIRED
  COMPLETED
  QUALITY_FAILED
  DISPOSED
}

enum IssuingStrategy {
  TDS
  BD
  OD
  QDS
  SOS
  NOCTE
  MANE
  VESPE
  NOON
  WEEKLY
  OTHER
}

enum MEAL {
  BEFORE
  AFTER
  WITH
}

enum PrescriptionStatus {
  PENDING
  COMPLETED
}

enum MedicalCertificateStatus {
  FIT
  UNFIT
}

enum PatientHistoryType {
  ALLERGY
  MEDICAL
  SURGICAL
  FAMILY
  SOCIAL
}

enum VitalType {
  NUMBER
  TEXT
  DATE
}

enum ChargeType {
  MEDICINE
  FIXED
  PERCENTAGE
  PROCEDURE
  DISCOUNT
}
